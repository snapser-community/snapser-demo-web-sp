/* tslint:disable */
/* eslint-disable */
/**
 * my-dev-cluster
 * Your custom SDK
 *
 * The version of the OpenAPI document: my-dev-cluster: v6 SDK
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiHttpBody,
  AuthAnonLoginRequest,
  AuthAnonLoginResponse,
  AuthAppleLoginRequest,
  AuthAppleLoginResponse,
  AuthAssociateLoginsRequest,
  AuthDiscordLoginRequest,
  AuthDiscordLoginResponse,
  AuthEmailLoginRequest,
  AuthEmailLoginResponse,
  AuthEmailPasswordLoginRequest,
  AuthEmailPasswordLoginResponse,
  AuthEpicLoginRequest,
  AuthEpicLoginResponse,
  AuthFacebookLoginRequest,
  AuthFacebookLoginResponse,
  AuthGetUsernameAvailabilityResponse,
  AuthGoogleLoginRequest,
  AuthGoogleLoginResponse,
  AuthOtpRequest,
  AuthRecoverEmailAccountRequest,
  AuthRefreshRequest,
  AuthRefreshResponse,
  AuthSteamLoginRequest,
  AuthSteamLoginResponse,
  AuthSteamOpenIdLoginRequest,
  AuthSteamSessionTicketLoginRequest,
  AuthUpdateEmailPasswordRequest,
  AuthUpdateUsernamePasswordRequest,
  AuthUsernamePasswordLoginRequest,
  AuthUsernamePasswordLoginResponse,
  AuthValidateRequest,
  AuthValidateResponse,
  AuthVerifyEmailRequest,
  AuthVerifyEmailResponse,
  AuthXLoginRequest,
  AuthXLoginResponse,
  AuthXboxLoginRequest,
  AuthXboxLoginResponse,
  DisassociateLoginRequest,
} from '../models/index';
import {
    ApiHttpBodyFromJSON,
    ApiHttpBodyToJSON,
    AuthAnonLoginRequestFromJSON,
    AuthAnonLoginRequestToJSON,
    AuthAnonLoginResponseFromJSON,
    AuthAnonLoginResponseToJSON,
    AuthAppleLoginRequestFromJSON,
    AuthAppleLoginRequestToJSON,
    AuthAppleLoginResponseFromJSON,
    AuthAppleLoginResponseToJSON,
    AuthAssociateLoginsRequestFromJSON,
    AuthAssociateLoginsRequestToJSON,
    AuthDiscordLoginRequestFromJSON,
    AuthDiscordLoginRequestToJSON,
    AuthDiscordLoginResponseFromJSON,
    AuthDiscordLoginResponseToJSON,
    AuthEmailLoginRequestFromJSON,
    AuthEmailLoginRequestToJSON,
    AuthEmailLoginResponseFromJSON,
    AuthEmailLoginResponseToJSON,
    AuthEmailPasswordLoginRequestFromJSON,
    AuthEmailPasswordLoginRequestToJSON,
    AuthEmailPasswordLoginResponseFromJSON,
    AuthEmailPasswordLoginResponseToJSON,
    AuthEpicLoginRequestFromJSON,
    AuthEpicLoginRequestToJSON,
    AuthEpicLoginResponseFromJSON,
    AuthEpicLoginResponseToJSON,
    AuthFacebookLoginRequestFromJSON,
    AuthFacebookLoginRequestToJSON,
    AuthFacebookLoginResponseFromJSON,
    AuthFacebookLoginResponseToJSON,
    AuthGetUsernameAvailabilityResponseFromJSON,
    AuthGetUsernameAvailabilityResponseToJSON,
    AuthGoogleLoginRequestFromJSON,
    AuthGoogleLoginRequestToJSON,
    AuthGoogleLoginResponseFromJSON,
    AuthGoogleLoginResponseToJSON,
    AuthOtpRequestFromJSON,
    AuthOtpRequestToJSON,
    AuthRecoverEmailAccountRequestFromJSON,
    AuthRecoverEmailAccountRequestToJSON,
    AuthRefreshRequestFromJSON,
    AuthRefreshRequestToJSON,
    AuthRefreshResponseFromJSON,
    AuthRefreshResponseToJSON,
    AuthSteamLoginRequestFromJSON,
    AuthSteamLoginRequestToJSON,
    AuthSteamLoginResponseFromJSON,
    AuthSteamLoginResponseToJSON,
    AuthSteamOpenIdLoginRequestFromJSON,
    AuthSteamOpenIdLoginRequestToJSON,
    AuthSteamSessionTicketLoginRequestFromJSON,
    AuthSteamSessionTicketLoginRequestToJSON,
    AuthUpdateEmailPasswordRequestFromJSON,
    AuthUpdateEmailPasswordRequestToJSON,
    AuthUpdateUsernamePasswordRequestFromJSON,
    AuthUpdateUsernamePasswordRequestToJSON,
    AuthUsernamePasswordLoginRequestFromJSON,
    AuthUsernamePasswordLoginRequestToJSON,
    AuthUsernamePasswordLoginResponseFromJSON,
    AuthUsernamePasswordLoginResponseToJSON,
    AuthValidateRequestFromJSON,
    AuthValidateRequestToJSON,
    AuthValidateResponseFromJSON,
    AuthValidateResponseToJSON,
    AuthVerifyEmailRequestFromJSON,
    AuthVerifyEmailRequestToJSON,
    AuthVerifyEmailResponseFromJSON,
    AuthVerifyEmailResponseToJSON,
    AuthXLoginRequestFromJSON,
    AuthXLoginRequestToJSON,
    AuthXLoginResponseFromJSON,
    AuthXLoginResponseToJSON,
    AuthXboxLoginRequestFromJSON,
    AuthXboxLoginRequestToJSON,
    AuthXboxLoginResponseFromJSON,
    AuthXboxLoginResponseToJSON,
    DisassociateLoginRequestFromJSON,
    DisassociateLoginRequestToJSON,
} from '../models/index';

export interface AuthAnonLoginOperationRequest {
    body: AuthAnonLoginRequest;
}

export interface AuthAppVerifyRequest {
    type: string;
    sessionToken?: string;
    clientSecret?: string;
}

export interface AuthAppleLoginOperationRequest {
    body: AuthAppleLoginRequest;
}

export interface AuthAssociateLoginsOperationRequest {
    body: AuthAssociateLoginsRequest;
}

export interface AuthDisassociateLoginRequest {
    userId: string;
    token: string;
    body: DisassociateLoginRequest;
}

export interface AuthDiscordLoginOperationRequest {
    body: AuthDiscordLoginRequest;
}

export interface AuthEmailLoginOperationRequest {
    body: AuthEmailLoginRequest;
}

export interface AuthEmailPasswordLoginOperationRequest {
    body: AuthEmailPasswordLoginRequest;
}

export interface AuthEpicLoginOperationRequest {
    body: AuthEpicLoginRequest;
}

export interface AuthFacebookLoginOperationRequest {
    body: AuthFacebookLoginRequest;
}

export interface AuthGetUsernameAvailabilityRequest {
    username: string;
}

export interface AuthGoogleLoginOperationRequest {
    body: AuthGoogleLoginRequest;
}

export interface AuthLogoutRequest {
    token: string;
    token2: string;
}

export interface AuthOtpOperationRequest {
    body: AuthOtpRequest;
}

export interface AuthRecoverEmailAccountOperationRequest {
    body: AuthRecoverEmailAccountRequest;
}

export interface AuthRefreshOperationRequest {
    token: string;
    body: AuthRefreshRequest;
}

export interface AuthSteamLoginOperationRequest {
    body: AuthSteamLoginRequest;
}

export interface AuthSteamOpenIdLoginOperationRequest {
    body: AuthSteamOpenIdLoginRequest;
}

export interface AuthSteamSessionTicketLoginOperationRequest {
    body: AuthSteamSessionTicketLoginRequest;
}

export interface AuthUpdateEmailPasswordOperationRequest {
    body: AuthUpdateEmailPasswordRequest;
}

export interface AuthUpdateUsernamePasswordOperationRequest {
    token: string;
    body: AuthUpdateUsernamePasswordRequest;
}

export interface AuthUsernamePasswordLoginOperationRequest {
    body: AuthUsernamePasswordLoginRequest;
}

export interface AuthValidateOperationRequest {
    body: AuthValidateRequest;
}

export interface AuthVerifyEmailOperationRequest {
    body: AuthVerifyEmailRequest;
}

export interface AuthXLoginOperationRequest {
    body: AuthXLoginRequest;
}

export interface AuthXboxLoginOperationRequest {
    body: AuthXboxLoginRequest;
}

/**
 * 
 */
export class AuthServiceApi extends runtime.BaseAPI {

    /**
     * Logs in the user with an arbitrary identifier specified and returns a session
     * Anonymous Login
     */
    async authAnonLoginRaw(requestParameters: AuthAnonLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthAnonLoginResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling authAnonLogin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/auth/login/anon`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AuthAnonLoginRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthAnonLoginResponseFromJSON(jsonValue));
    }

    /**
     * Logs in the user with an arbitrary identifier specified and returns a session
     * Anonymous Login
     */
    async authAnonLogin(requestParameters: AuthAnonLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthAnonLoginResponse> {
        const response = await this.authAnonLoginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Verifies the session token and returns appropriate response based on the type
     * Token
     */
    async authAppVerifyRaw(requestParameters: AuthAppVerifyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiHttpBody>> {
        if (requestParameters.type === null || requestParameters.type === undefined) {
            throw new runtime.RequiredError('type','Required parameter requestParameters.type was null or undefined when calling authAppVerify.');
        }

        const queryParameters: any = {};

        if (requestParameters.sessionToken !== undefined) {
            queryParameters['session_token'] = requestParameters.sessionToken;
        }

        if (requestParameters.clientSecret !== undefined) {
            queryParameters['client_secret'] = requestParameters.clientSecret;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/auth/app-verify/{type}`.replace(`{${"type"}}`, encodeURIComponent(String(requestParameters.type))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiHttpBodyFromJSON(jsonValue));
    }

    /**
     * Verifies the session token and returns appropriate response based on the type
     * Token
     */
    async authAppVerify(requestParameters: AuthAppVerifyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiHttpBody> {
        const response = await this.authAppVerifyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Logs in the user based on the apple credential token specified and returns a session
     * Apple Login
     */
    async authAppleLoginRaw(requestParameters: AuthAppleLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthAppleLoginResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling authAppleLogin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/auth/login/apple`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AuthAppleLoginRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthAppleLoginResponseFromJSON(jsonValue));
    }

    /**
     * Logs in the user based on the apple credential token specified and returns a session
     * Apple Login
     */
    async authAppleLogin(requestParameters: AuthAppleLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthAppleLoginResponse> {
        const response = await this.authAppleLoginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Associates two logins based on their session tokens
     * Associate Multiple Logins
     */
    async authAssociateLoginsRaw(requestParameters: AuthAssociateLoginsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling authAssociateLogins.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/auth/associate-logins`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AuthAssociateLoginsRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Associates two logins based on their session tokens
     * Associate Multiple Logins
     */
    async authAssociateLogins(requestParameters: AuthAssociateLoginsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.authAssociateLoginsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Disassociates the specified login from a user
     * Disassociate
     */
    async authDisassociateLoginRaw(requestParameters: AuthDisassociateLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling authDisassociateLogin.');
        }

        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling authDisassociateLogin.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling authDisassociateLogin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        const response = await this.request({
            path: `/v1/auth/users/{user_id}/disassociation`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DisassociateLoginRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Disassociates the specified login from a user
     * Disassociate
     */
    async authDisassociateLogin(requestParameters: AuthDisassociateLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.authDisassociateLoginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Logs in the user based on the discord token specified and returns a session
     * Discord Login
     */
    async authDiscordLoginRaw(requestParameters: AuthDiscordLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthDiscordLoginResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling authDiscordLogin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/auth/discord/login`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AuthDiscordLoginRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthDiscordLoginResponseFromJSON(jsonValue));
    }

    /**
     * Logs in the user based on the discord token specified and returns a session
     * Discord Login
     */
    async authDiscordLogin(requestParameters: AuthDiscordLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthDiscordLoginResponse> {
        const response = await this.authDiscordLoginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Logs in the user based on the email and OTP specified and returns a session
     * Email Login
     */
    async authEmailLoginRaw(requestParameters: AuthEmailLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthEmailLoginResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling authEmailLogin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/auth/login/email`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AuthEmailLoginRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthEmailLoginResponseFromJSON(jsonValue));
    }

    /**
     * Logs in the user based on the email and OTP specified and returns a session
     * Email Login
     */
    async authEmailLogin(requestParameters: AuthEmailLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthEmailLoginResponse> {
        const response = await this.authEmailLoginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Logs in the user based on the email and password specified and returns a session
     * Email Password Login
     */
    async authEmailPasswordLoginRaw(requestParameters: AuthEmailPasswordLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthEmailPasswordLoginResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling authEmailPasswordLogin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/auth/email-password/login`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AuthEmailPasswordLoginRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthEmailPasswordLoginResponseFromJSON(jsonValue));
    }

    /**
     * Logs in the user based on the email and password specified and returns a session
     * Email Password Login
     */
    async authEmailPasswordLogin(requestParameters: AuthEmailPasswordLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthEmailPasswordLoginResponse> {
        const response = await this.authEmailPasswordLoginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Logs in the user based on the epic credentials specified and returns a session
     * Epic Login
     */
    async authEpicLoginRaw(requestParameters: AuthEpicLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthEpicLoginResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling authEpicLogin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/auth/login/epic`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AuthEpicLoginRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthEpicLoginResponseFromJSON(jsonValue));
    }

    /**
     * Logs in the user based on the epic credentials specified and returns a session
     * Epic Login
     */
    async authEpicLogin(requestParameters: AuthEpicLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthEpicLoginResponse> {
        const response = await this.authEpicLoginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Logs in the user based on the facebook credential token specified and returns a session
     * Facebook Login
     */
    async authFacebookLoginRaw(requestParameters: AuthFacebookLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthFacebookLoginResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling authFacebookLogin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/auth/login/facebook`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AuthFacebookLoginRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthFacebookLoginResponseFromJSON(jsonValue));
    }

    /**
     * Logs in the user based on the facebook credential token specified and returns a session
     * Facebook Login
     */
    async authFacebookLogin(requestParameters: AuthFacebookLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthFacebookLoginResponse> {
        const response = await this.authFacebookLoginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Checks if the username is available
     * Username Password Login
     */
    async authGetUsernameAvailabilityRaw(requestParameters: AuthGetUsernameAvailabilityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthGetUsernameAvailabilityResponse>> {
        if (requestParameters.username === null || requestParameters.username === undefined) {
            throw new runtime.RequiredError('username','Required parameter requestParameters.username was null or undefined when calling authGetUsernameAvailability.');
        }

        const queryParameters: any = {};

        if (requestParameters.username !== undefined) {
            queryParameters['username'] = requestParameters.username;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/auth/username-password/availability`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthGetUsernameAvailabilityResponseFromJSON(jsonValue));
    }

    /**
     * Checks if the username is available
     * Username Password Login
     */
    async authGetUsernameAvailability(requestParameters: AuthGetUsernameAvailabilityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthGetUsernameAvailabilityResponse> {
        const response = await this.authGetUsernameAvailabilityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Logs in the user based on the google credential token specified and returns a session
     * Google Login
     */
    async authGoogleLoginRaw(requestParameters: AuthGoogleLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthGoogleLoginResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling authGoogleLogin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/auth/login/google`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AuthGoogleLoginRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthGoogleLoginResponseFromJSON(jsonValue));
    }

    /**
     * Logs in the user based on the google credential token specified and returns a session
     * Google Login
     */
    async authGoogleLogin(requestParameters: AuthGoogleLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthGoogleLoginResponse> {
        const response = await this.authGoogleLoginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Ends the current session of the user
     * Logout User
     */
    async authLogoutRaw(requestParameters: AuthLogoutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling authLogout.');
        }

        if (requestParameters.token2 === null || requestParameters.token2 === undefined) {
            throw new runtime.RequiredError('token2','Required parameter requestParameters.token2 was null or undefined when calling authLogout.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.token2 !== undefined && requestParameters.token2 !== null) {
            headerParameters['Token'] = String(requestParameters.token2);
        }

        const response = await this.request({
            path: `/v1/auth/logout/{token}`.replace(`{${"token"}}`, encodeURIComponent(String(requestParameters.token))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Ends the current session of the user
     * Logout User
     */
    async authLogout(requestParameters: AuthLogoutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.authLogoutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Generates an OTP and sends it to the email for logging in
     * Email Login
     */
    async authOtpRaw(requestParameters: AuthOtpOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling authOtp.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/auth/otp`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthOtpRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Generates an OTP and sends it to the email for logging in
     * Email Login
     */
    async authOtp(requestParameters: AuthOtpOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.authOtpRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sends an email to the user for account recovery
     * Email Password Login
     */
    async authRecoverEmailAccountRaw(requestParameters: AuthRecoverEmailAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling authRecoverEmailAccount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/auth/email-password/account-recovery`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthRecoverEmailAccountRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Sends an email to the user for account recovery
     * Email Password Login
     */
    async authRecoverEmailAccount(requestParameters: AuthRecoverEmailAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.authRecoverEmailAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Refreshes the session and returns a new session token with refreshed validity
     * Token
     */
    async authRefreshRaw(requestParameters: AuthRefreshOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthRefreshResponse>> {
        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling authRefresh.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling authRefresh.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        const response = await this.request({
            path: `/v1/auth/refresh`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AuthRefreshRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthRefreshResponseFromJSON(jsonValue));
    }

    /**
     * Refreshes the session and returns a new session token with refreshed validity
     * Token
     */
    async authRefresh(requestParameters: AuthRefreshOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthRefreshResponse> {
        const response = await this.authRefreshRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Logs in the user based on the steam token specified and returns a session
     * Steam Login
     */
    async authSteamLoginRaw(requestParameters: AuthSteamLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthSteamLoginResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling authSteamLogin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/auth/login/steam`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AuthSteamLoginRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthSteamLoginResponseFromJSON(jsonValue));
    }

    /**
     * Logs in the user based on the steam token specified and returns a session
     * Steam Login
     */
    async authSteamLogin(requestParameters: AuthSteamLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthSteamLoginResponse> {
        const response = await this.authSteamLoginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Logs in the user based on the steam open ID token specified and returns a session
     * Steam Login
     */
    async authSteamOpenIdLoginRaw(requestParameters: AuthSteamOpenIdLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthSteamLoginResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling authSteamOpenIdLogin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/auth/steam/openid/login`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AuthSteamOpenIdLoginRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthSteamLoginResponseFromJSON(jsonValue));
    }

    /**
     * Logs in the user based on the steam open ID token specified and returns a session
     * Steam Login
     */
    async authSteamOpenIdLogin(requestParameters: AuthSteamOpenIdLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthSteamLoginResponse> {
        const response = await this.authSteamOpenIdLoginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Logs in the user based on the steam session ticket specified and returns a session
     * Steam Login
     */
    async authSteamSessionTicketLoginRaw(requestParameters: AuthSteamSessionTicketLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthSteamLoginResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling authSteamSessionTicketLogin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/auth/steam/session-ticket/login`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AuthSteamSessionTicketLoginRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthSteamLoginResponseFromJSON(jsonValue));
    }

    /**
     * Logs in the user based on the steam session ticket specified and returns a session
     * Steam Login
     */
    async authSteamSessionTicketLogin(requestParameters: AuthSteamSessionTicketLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthSteamLoginResponse> {
        const response = await this.authSteamSessionTicketLoginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the email and password of the user
     * Email Password Login
     */
    async authUpdateEmailPasswordRaw(requestParameters: AuthUpdateEmailPasswordOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling authUpdateEmailPassword.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/auth/email-password/password`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AuthUpdateEmailPasswordRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Updates the email and password of the user
     * Email Password Login
     */
    async authUpdateEmailPassword(requestParameters: AuthUpdateEmailPasswordOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.authUpdateEmailPasswordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the username and password of the user
     * Username Password Login
     */
    async authUpdateUsernamePasswordRaw(requestParameters: AuthUpdateUsernamePasswordOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling authUpdateUsernamePassword.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling authUpdateUsernamePassword.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        const response = await this.request({
            path: `/v1/auth/username-password/password`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AuthUpdateUsernamePasswordRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Updates the username and password of the user
     * Username Password Login
     */
    async authUpdateUsernamePassword(requestParameters: AuthUpdateUsernamePasswordOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.authUpdateUsernamePasswordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Logs in the user based on the username and password specified and returns a session
     * Username Password Login
     */
    async authUsernamePasswordLoginRaw(requestParameters: AuthUsernamePasswordLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthUsernamePasswordLoginResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling authUsernamePasswordLogin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/auth/username-password/login`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AuthUsernamePasswordLoginRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthUsernamePasswordLoginResponseFromJSON(jsonValue));
    }

    /**
     * Logs in the user based on the username and password specified and returns a session
     * Username Password Login
     */
    async authUsernamePasswordLogin(requestParameters: AuthUsernamePasswordLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthUsernamePasswordLoginResponse> {
        const response = await this.authUsernamePasswordLoginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Validates the session of the user and returns the user info
     * Token
     */
    async authValidateRaw(requestParameters: AuthValidateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthValidateResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling authValidate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/auth/validate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthValidateRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthValidateResponseFromJSON(jsonValue));
    }

    /**
     * Validates the session of the user and returns the user info
     * Token
     */
    async authValidate(requestParameters: AuthValidateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthValidateResponse> {
        const response = await this.authValidateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Verifies the email and returns a session
     * Email Password Login
     */
    async authVerifyEmailRaw(requestParameters: AuthVerifyEmailOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthVerifyEmailResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling authVerifyEmail.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/auth/email-password/verification`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthVerifyEmailRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthVerifyEmailResponseFromJSON(jsonValue));
    }

    /**
     * Verifies the email and returns a session
     * Email Password Login
     */
    async authVerifyEmail(requestParameters: AuthVerifyEmailOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthVerifyEmailResponse> {
        const response = await this.authVerifyEmailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Logs in the user based on the X login credentials specified and returns a session
     * X Login
     */
    async authXLoginRaw(requestParameters: AuthXLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthXLoginResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling authXLogin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/auth/x/login`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AuthXLoginRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthXLoginResponseFromJSON(jsonValue));
    }

    /**
     * Logs in the user based on the X login credentials specified and returns a session
     * X Login
     */
    async authXLogin(requestParameters: AuthXLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthXLoginResponse> {
        const response = await this.authXLoginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Logs in the user based on the xbox token specified and returns a session
     * Xbox Login
     */
    async authXboxLoginRaw(requestParameters: AuthXboxLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthXboxLoginResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling authXboxLogin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/auth/login/xbox`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AuthXboxLoginRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthXboxLoginResponseFromJSON(jsonValue));
    }

    /**
     * Logs in the user based on the xbox token specified and returns a session
     * Xbox Login
     */
    async authXboxLogin(requestParameters: AuthXboxLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthXboxLoginResponse> {
        const response = await this.authXboxLoginRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
