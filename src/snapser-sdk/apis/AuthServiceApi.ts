/* tslint:disable */
/* eslint-disable */
/**
 * test
 * Your custom SDK
 *
 * The version of the OpenAPI document: test: v1 SDK
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiHttpBody,
  AuthAnonLoginRequest,
  AuthAnonLoginResponse,
  AuthAppleLoginRequest,
  AuthAppleLoginResponse,
  AuthAssociateLoginsRequest,
  AuthDiscordLoginRequest,
  AuthDiscordLoginResponse,
  AuthEmailLoginRequest,
  AuthEmailLoginResponse,
  AuthEmailPasswordLoginRequest,
  AuthEmailPasswordLoginResponse,
  AuthEpicLoginRequest,
  AuthEpicLoginResponse,
  AuthFacebookLoginRequest,
  AuthFacebookLoginResponse,
  AuthGetUsernameAvailabilityResponse,
  AuthGoogleLoginRequest,
  AuthGoogleLoginResponse,
  AuthOtpRequest,
  AuthRecoverEmailAccountRequest,
  AuthRefreshRequest,
  AuthRefreshResponse,
  AuthSteamLoginRequest,
  AuthSteamLoginResponse,
  AuthSteamOpenIdLoginRequest,
  AuthSteamSessionTicketLoginRequest,
  AuthUpdateEmailPasswordRequest,
  AuthUpdateUsernamePasswordRequest,
  AuthUsernamePasswordLoginRequest,
  AuthUsernamePasswordLoginResponse,
  AuthValidateRequest,
  AuthValidateResponse,
  AuthVerifyEmailRequest,
  AuthVerifyEmailResponse,
  AuthXLoginRequest,
  AuthXLoginResponse,
  AuthXboxLoginRequest,
  AuthXboxLoginResponse,
  DisassociateLoginRequest,
} from '../models/index';
import {
    ApiHttpBodyFromJSON,
    ApiHttpBodyToJSON,
    AuthAnonLoginRequestFromJSON,
    AuthAnonLoginRequestToJSON,
    AuthAnonLoginResponseFromJSON,
    AuthAnonLoginResponseToJSON,
    AuthAppleLoginRequestFromJSON,
    AuthAppleLoginRequestToJSON,
    AuthAppleLoginResponseFromJSON,
    AuthAppleLoginResponseToJSON,
    AuthAssociateLoginsRequestFromJSON,
    AuthAssociateLoginsRequestToJSON,
    AuthDiscordLoginRequestFromJSON,
    AuthDiscordLoginRequestToJSON,
    AuthDiscordLoginResponseFromJSON,
    AuthDiscordLoginResponseToJSON,
    AuthEmailLoginRequestFromJSON,
    AuthEmailLoginRequestToJSON,
    AuthEmailLoginResponseFromJSON,
    AuthEmailLoginResponseToJSON,
    AuthEmailPasswordLoginRequestFromJSON,
    AuthEmailPasswordLoginRequestToJSON,
    AuthEmailPasswordLoginResponseFromJSON,
    AuthEmailPasswordLoginResponseToJSON,
    AuthEpicLoginRequestFromJSON,
    AuthEpicLoginRequestToJSON,
    AuthEpicLoginResponseFromJSON,
    AuthEpicLoginResponseToJSON,
    AuthFacebookLoginRequestFromJSON,
    AuthFacebookLoginRequestToJSON,
    AuthFacebookLoginResponseFromJSON,
    AuthFacebookLoginResponseToJSON,
    AuthGetUsernameAvailabilityResponseFromJSON,
    AuthGetUsernameAvailabilityResponseToJSON,
    AuthGoogleLoginRequestFromJSON,
    AuthGoogleLoginRequestToJSON,
    AuthGoogleLoginResponseFromJSON,
    AuthGoogleLoginResponseToJSON,
    AuthOtpRequestFromJSON,
    AuthOtpRequestToJSON,
    AuthRecoverEmailAccountRequestFromJSON,
    AuthRecoverEmailAccountRequestToJSON,
    AuthRefreshRequestFromJSON,
    AuthRefreshRequestToJSON,
    AuthRefreshResponseFromJSON,
    AuthRefreshResponseToJSON,
    AuthSteamLoginRequestFromJSON,
    AuthSteamLoginRequestToJSON,
    AuthSteamLoginResponseFromJSON,
    AuthSteamLoginResponseToJSON,
    AuthSteamOpenIdLoginRequestFromJSON,
    AuthSteamOpenIdLoginRequestToJSON,
    AuthSteamSessionTicketLoginRequestFromJSON,
    AuthSteamSessionTicketLoginRequestToJSON,
    AuthUpdateEmailPasswordRequestFromJSON,
    AuthUpdateEmailPasswordRequestToJSON,
    AuthUpdateUsernamePasswordRequestFromJSON,
    AuthUpdateUsernamePasswordRequestToJSON,
    AuthUsernamePasswordLoginRequestFromJSON,
    AuthUsernamePasswordLoginRequestToJSON,
    AuthUsernamePasswordLoginResponseFromJSON,
    AuthUsernamePasswordLoginResponseToJSON,
    AuthValidateRequestFromJSON,
    AuthValidateRequestToJSON,
    AuthValidateResponseFromJSON,
    AuthValidateResponseToJSON,
    AuthVerifyEmailRequestFromJSON,
    AuthVerifyEmailRequestToJSON,
    AuthVerifyEmailResponseFromJSON,
    AuthVerifyEmailResponseToJSON,
    AuthXLoginRequestFromJSON,
    AuthXLoginRequestToJSON,
    AuthXLoginResponseFromJSON,
    AuthXLoginResponseToJSON,
    AuthXboxLoginRequestFromJSON,
    AuthXboxLoginRequestToJSON,
    AuthXboxLoginResponseFromJSON,
    AuthXboxLoginResponseToJSON,
    DisassociateLoginRequestFromJSON,
    DisassociateLoginRequestToJSON,
} from '../models/index';

export interface AuthUserAnonLoginRequest {
    body: AuthAnonLoginRequest;
}

export interface AuthUserAppVerifyRequest {
    type: string;
    sessionToken?: string;
    clientSecret?: string;
}

export interface AuthUserAppleLoginRequest {
    body: AuthAppleLoginRequest;
}

export interface AuthUserAssociateLoginsRequest {
    body: AuthAssociateLoginsRequest;
}

export interface AuthUserDisassociateLoginRequest {
    userId: string;
    token: string;
    body: DisassociateLoginRequest;
}

export interface AuthUserDiscordLoginRequest {
    body: AuthDiscordLoginRequest;
}

export interface AuthUserEmailLoginRequest {
    body: AuthEmailLoginRequest;
}

export interface AuthUserEmailPasswordLoginRequest {
    body: AuthEmailPasswordLoginRequest;
}

export interface AuthUserEpicLoginRequest {
    body: AuthEpicLoginRequest;
}

export interface AuthUserFacebookLoginRequest {
    body: AuthFacebookLoginRequest;
}

export interface AuthUserGetUsernameAvailabilityRequest {
    username: string;
}

export interface AuthUserGoogleLoginRequest {
    body: AuthGoogleLoginRequest;
}

export interface AuthUserLogoutRequest {
    token: string;
    token2: string;
}

export interface AuthUserOtpRequest {
    body: AuthOtpRequest;
}

export interface AuthUserRecoverEmailAccountRequest {
    body: AuthRecoverEmailAccountRequest;
}

export interface AuthUserRefreshRequest {
    token: string;
    body: AuthRefreshRequest;
}

export interface AuthUserSteamLoginRequest {
    body: AuthSteamLoginRequest;
}

export interface AuthUserSteamOpenIdLoginRequest {
    body: AuthSteamOpenIdLoginRequest;
}

export interface AuthUserSteamSessionTicketLoginRequest {
    body: AuthSteamSessionTicketLoginRequest;
}

export interface AuthUserUpdateEmailPasswordRequest {
    body: AuthUpdateEmailPasswordRequest;
}

export interface AuthUserUpdateUsernamePasswordRequest {
    token: string;
    body: AuthUpdateUsernamePasswordRequest;
}

export interface AuthUserUsernamePasswordLoginRequest {
    body: AuthUsernamePasswordLoginRequest;
}

export interface AuthUserValidateRequest {
    body: AuthValidateRequest;
}

export interface AuthUserVerifyEmailRequest {
    body: AuthVerifyEmailRequest;
}

export interface AuthUserXLoginRequest {
    body: AuthXLoginRequest;
}

export interface AuthUserXboxLoginRequest {
    body: AuthXboxLoginRequest;
}

/**
 * 
 */
export class AuthServiceApi extends runtime.BaseAPI {

    /**
     * Logs in the user with an arbitrary identifier specified and returns a session
     * Anonymous Login
     */
    async authUserAnonLoginRaw(requestParameters: AuthUserAnonLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthAnonLoginResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling authUserAnonLogin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/auth/login/anon`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AuthAnonLoginRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthAnonLoginResponseFromJSON(jsonValue));
    }

    /**
     * Logs in the user with an arbitrary identifier specified and returns a session
     * Anonymous Login
     */
    async authUserAnonLogin(requestParameters: AuthUserAnonLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthAnonLoginResponse> {
        const response = await this.authUserAnonLoginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Verifies the session token and returns appropriate response based on the type
     * Token
     */
    async authUserAppVerifyRaw(requestParameters: AuthUserAppVerifyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiHttpBody>> {
        if (requestParameters.type === null || requestParameters.type === undefined) {
            throw new runtime.RequiredError('type','Required parameter requestParameters.type was null or undefined when calling authUserAppVerify.');
        }

        const queryParameters: any = {};

        if (requestParameters.sessionToken !== undefined) {
            queryParameters['session_token'] = requestParameters.sessionToken;
        }

        if (requestParameters.clientSecret !== undefined) {
            queryParameters['client_secret'] = requestParameters.clientSecret;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/auth/app-verify/{type}`.replace(`{${"type"}}`, encodeURIComponent(String(requestParameters.type))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiHttpBodyFromJSON(jsonValue));
    }

    /**
     * Verifies the session token and returns appropriate response based on the type
     * Token
     */
    async authUserAppVerify(requestParameters: AuthUserAppVerifyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiHttpBody> {
        const response = await this.authUserAppVerifyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Logs in the user based on the apple credential token specified and returns a session
     * Apple Login
     */
    async authUserAppleLoginRaw(requestParameters: AuthUserAppleLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthAppleLoginResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling authUserAppleLogin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/auth/login/apple`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AuthAppleLoginRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthAppleLoginResponseFromJSON(jsonValue));
    }

    /**
     * Logs in the user based on the apple credential token specified and returns a session
     * Apple Login
     */
    async authUserAppleLogin(requestParameters: AuthUserAppleLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthAppleLoginResponse> {
        const response = await this.authUserAppleLoginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Associates two logins based on their session tokens
     * Associate Multiple Logins
     */
    async authUserAssociateLoginsRaw(requestParameters: AuthUserAssociateLoginsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling authUserAssociateLogins.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/auth/associate-logins`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AuthAssociateLoginsRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Associates two logins based on their session tokens
     * Associate Multiple Logins
     */
    async authUserAssociateLogins(requestParameters: AuthUserAssociateLoginsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.authUserAssociateLoginsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Disassociates the specified login from a user
     * Disassociate
     */
    async authUserDisassociateLoginRaw(requestParameters: AuthUserDisassociateLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling authUserDisassociateLogin.');
        }

        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling authUserDisassociateLogin.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling authUserDisassociateLogin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        const response = await this.request({
            path: `/v1/auth/users/{user_id}/disassociation`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DisassociateLoginRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Disassociates the specified login from a user
     * Disassociate
     */
    async authUserDisassociateLogin(requestParameters: AuthUserDisassociateLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.authUserDisassociateLoginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Logs in the user based on the discord token specified and returns a session
     * Discord Login
     */
    async authUserDiscordLoginRaw(requestParameters: AuthUserDiscordLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthDiscordLoginResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling authUserDiscordLogin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/auth/discord/login`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AuthDiscordLoginRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthDiscordLoginResponseFromJSON(jsonValue));
    }

    /**
     * Logs in the user based on the discord token specified and returns a session
     * Discord Login
     */
    async authUserDiscordLogin(requestParameters: AuthUserDiscordLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthDiscordLoginResponse> {
        const response = await this.authUserDiscordLoginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Logs in the user based on the email and OTP specified and returns a session
     * Email Login
     */
    async authUserEmailLoginRaw(requestParameters: AuthUserEmailLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthEmailLoginResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling authUserEmailLogin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/auth/login/email`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AuthEmailLoginRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthEmailLoginResponseFromJSON(jsonValue));
    }

    /**
     * Logs in the user based on the email and OTP specified and returns a session
     * Email Login
     */
    async authUserEmailLogin(requestParameters: AuthUserEmailLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthEmailLoginResponse> {
        const response = await this.authUserEmailLoginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Logs in the user based on the email and password specified and returns a session
     * Email Password Login
     */
    async authUserEmailPasswordLoginRaw(requestParameters: AuthUserEmailPasswordLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthEmailPasswordLoginResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling authUserEmailPasswordLogin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/auth/email-password/login`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AuthEmailPasswordLoginRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthEmailPasswordLoginResponseFromJSON(jsonValue));
    }

    /**
     * Logs in the user based on the email and password specified and returns a session
     * Email Password Login
     */
    async authUserEmailPasswordLogin(requestParameters: AuthUserEmailPasswordLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthEmailPasswordLoginResponse> {
        const response = await this.authUserEmailPasswordLoginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Logs in the user based on the epic credentials specified and returns a session
     * Epic Login
     */
    async authUserEpicLoginRaw(requestParameters: AuthUserEpicLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthEpicLoginResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling authUserEpicLogin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/auth/login/epic`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AuthEpicLoginRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthEpicLoginResponseFromJSON(jsonValue));
    }

    /**
     * Logs in the user based on the epic credentials specified and returns a session
     * Epic Login
     */
    async authUserEpicLogin(requestParameters: AuthUserEpicLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthEpicLoginResponse> {
        const response = await this.authUserEpicLoginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Logs in the user based on the facebook credential token specified and returns a session
     * Facebook Login
     */
    async authUserFacebookLoginRaw(requestParameters: AuthUserFacebookLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthFacebookLoginResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling authUserFacebookLogin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/auth/login/facebook`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AuthFacebookLoginRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthFacebookLoginResponseFromJSON(jsonValue));
    }

    /**
     * Logs in the user based on the facebook credential token specified and returns a session
     * Facebook Login
     */
    async authUserFacebookLogin(requestParameters: AuthUserFacebookLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthFacebookLoginResponse> {
        const response = await this.authUserFacebookLoginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Checks if the username is available
     * Username Password Login
     */
    async authUserGetUsernameAvailabilityRaw(requestParameters: AuthUserGetUsernameAvailabilityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthGetUsernameAvailabilityResponse>> {
        if (requestParameters.username === null || requestParameters.username === undefined) {
            throw new runtime.RequiredError('username','Required parameter requestParameters.username was null or undefined when calling authUserGetUsernameAvailability.');
        }

        const queryParameters: any = {};

        if (requestParameters.username !== undefined) {
            queryParameters['username'] = requestParameters.username;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/auth/username-password/availability`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthGetUsernameAvailabilityResponseFromJSON(jsonValue));
    }

    /**
     * Checks if the username is available
     * Username Password Login
     */
    async authUserGetUsernameAvailability(requestParameters: AuthUserGetUsernameAvailabilityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthGetUsernameAvailabilityResponse> {
        const response = await this.authUserGetUsernameAvailabilityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Logs in the user based on the google credential token specified and returns a session
     * Google Login
     */
    async authUserGoogleLoginRaw(requestParameters: AuthUserGoogleLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthGoogleLoginResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling authUserGoogleLogin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/auth/login/google`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AuthGoogleLoginRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthGoogleLoginResponseFromJSON(jsonValue));
    }

    /**
     * Logs in the user based on the google credential token specified and returns a session
     * Google Login
     */
    async authUserGoogleLogin(requestParameters: AuthUserGoogleLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthGoogleLoginResponse> {
        const response = await this.authUserGoogleLoginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Ends the current session of the user
     * Logout User
     */
    async authUserLogoutRaw(requestParameters: AuthUserLogoutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling authUserLogout.');
        }

        if (requestParameters.token2 === null || requestParameters.token2 === undefined) {
            throw new runtime.RequiredError('token2','Required parameter requestParameters.token2 was null or undefined when calling authUserLogout.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.token2 !== undefined && requestParameters.token2 !== null) {
            headerParameters['Token'] = String(requestParameters.token2);
        }

        const response = await this.request({
            path: `/v1/auth/logout/{token}`.replace(`{${"token"}}`, encodeURIComponent(String(requestParameters.token))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Ends the current session of the user
     * Logout User
     */
    async authUserLogout(requestParameters: AuthUserLogoutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.authUserLogoutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Generates an OTP and sends it to the email for logging in
     * Email Login
     */
    async authUserOtpRaw(requestParameters: AuthUserOtpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling authUserOtp.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/auth/otp`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthOtpRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Generates an OTP and sends it to the email for logging in
     * Email Login
     */
    async authUserOtp(requestParameters: AuthUserOtpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.authUserOtpRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sends an email to the user for account recovery
     * Email Password Login
     */
    async authUserRecoverEmailAccountRaw(requestParameters: AuthUserRecoverEmailAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling authUserRecoverEmailAccount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/auth/email-password/account-recovery`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthRecoverEmailAccountRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Sends an email to the user for account recovery
     * Email Password Login
     */
    async authUserRecoverEmailAccount(requestParameters: AuthUserRecoverEmailAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.authUserRecoverEmailAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Refreshes the session and returns a new session token with refreshed validity
     * Token
     */
    async authUserRefreshRaw(requestParameters: AuthUserRefreshRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthRefreshResponse>> {
        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling authUserRefresh.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling authUserRefresh.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        const response = await this.request({
            path: `/v1/auth/refresh`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AuthRefreshRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthRefreshResponseFromJSON(jsonValue));
    }

    /**
     * Refreshes the session and returns a new session token with refreshed validity
     * Token
     */
    async authUserRefresh(requestParameters: AuthUserRefreshRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthRefreshResponse> {
        const response = await this.authUserRefreshRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Logs in the user based on the steam token specified and returns a session
     * Steam Login
     */
    async authUserSteamLoginRaw(requestParameters: AuthUserSteamLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthSteamLoginResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling authUserSteamLogin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/auth/login/steam`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AuthSteamLoginRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthSteamLoginResponseFromJSON(jsonValue));
    }

    /**
     * Logs in the user based on the steam token specified and returns a session
     * Steam Login
     */
    async authUserSteamLogin(requestParameters: AuthUserSteamLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthSteamLoginResponse> {
        const response = await this.authUserSteamLoginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Logs in the user based on the steam open ID token specified and returns a session
     * Steam Login
     */
    async authUserSteamOpenIdLoginRaw(requestParameters: AuthUserSteamOpenIdLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthSteamLoginResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling authUserSteamOpenIdLogin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/auth/steam/openid/login`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AuthSteamOpenIdLoginRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthSteamLoginResponseFromJSON(jsonValue));
    }

    /**
     * Logs in the user based on the steam open ID token specified and returns a session
     * Steam Login
     */
    async authUserSteamOpenIdLogin(requestParameters: AuthUserSteamOpenIdLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthSteamLoginResponse> {
        const response = await this.authUserSteamOpenIdLoginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Logs in the user based on the steam session ticket specified and returns a session
     * Steam Login
     */
    async authUserSteamSessionTicketLoginRaw(requestParameters: AuthUserSteamSessionTicketLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthSteamLoginResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling authUserSteamSessionTicketLogin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/auth/steam/session-ticket/login`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AuthSteamSessionTicketLoginRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthSteamLoginResponseFromJSON(jsonValue));
    }

    /**
     * Logs in the user based on the steam session ticket specified and returns a session
     * Steam Login
     */
    async authUserSteamSessionTicketLogin(requestParameters: AuthUserSteamSessionTicketLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthSteamLoginResponse> {
        const response = await this.authUserSteamSessionTicketLoginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the email and password of the user
     * Email Password Login
     */
    async authUserUpdateEmailPasswordRaw(requestParameters: AuthUserUpdateEmailPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling authUserUpdateEmailPassword.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/auth/email-password/password`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AuthUpdateEmailPasswordRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Updates the email and password of the user
     * Email Password Login
     */
    async authUserUpdateEmailPassword(requestParameters: AuthUserUpdateEmailPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.authUserUpdateEmailPasswordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the username and password of the user
     * Username Password Login
     */
    async authUserUpdateUsernamePasswordRaw(requestParameters: AuthUserUpdateUsernamePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling authUserUpdateUsernamePassword.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling authUserUpdateUsernamePassword.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        const response = await this.request({
            path: `/v1/auth/username-password/password`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AuthUpdateUsernamePasswordRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Updates the username and password of the user
     * Username Password Login
     */
    async authUserUpdateUsernamePassword(requestParameters: AuthUserUpdateUsernamePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.authUserUpdateUsernamePasswordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Logs in the user based on the username and password specified and returns a session
     * Username Password Login
     */
    async authUserUsernamePasswordLoginRaw(requestParameters: AuthUserUsernamePasswordLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthUsernamePasswordLoginResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling authUserUsernamePasswordLogin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/auth/username-password/login`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AuthUsernamePasswordLoginRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthUsernamePasswordLoginResponseFromJSON(jsonValue));
    }

    /**
     * Logs in the user based on the username and password specified and returns a session
     * Username Password Login
     */
    async authUserUsernamePasswordLogin(requestParameters: AuthUserUsernamePasswordLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthUsernamePasswordLoginResponse> {
        const response = await this.authUserUsernamePasswordLoginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Validates the session of the user and returns the user info
     * Token
     */
    async authUserValidateRaw(requestParameters: AuthUserValidateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthValidateResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling authUserValidate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/auth/validate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthValidateRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthValidateResponseFromJSON(jsonValue));
    }

    /**
     * Validates the session of the user and returns the user info
     * Token
     */
    async authUserValidate(requestParameters: AuthUserValidateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthValidateResponse> {
        const response = await this.authUserValidateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Verifies the email and returns a session
     * Email Password Login
     */
    async authUserVerifyEmailRaw(requestParameters: AuthUserVerifyEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthVerifyEmailResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling authUserVerifyEmail.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/auth/email-password/verification`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthVerifyEmailRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthVerifyEmailResponseFromJSON(jsonValue));
    }

    /**
     * Verifies the email and returns a session
     * Email Password Login
     */
    async authUserVerifyEmail(requestParameters: AuthUserVerifyEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthVerifyEmailResponse> {
        const response = await this.authUserVerifyEmailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Logs in the user based on the X login credentials specified and returns a session
     * X Login
     */
    async authUserXLoginRaw(requestParameters: AuthUserXLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthXLoginResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling authUserXLogin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/auth/x/login`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AuthXLoginRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthXLoginResponseFromJSON(jsonValue));
    }

    /**
     * Logs in the user based on the X login credentials specified and returns a session
     * X Login
     */
    async authUserXLogin(requestParameters: AuthUserXLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthXLoginResponse> {
        const response = await this.authUserXLoginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Logs in the user based on the xbox token specified and returns a session
     * Xbox Login
     */
    async authUserXboxLoginRaw(requestParameters: AuthUserXboxLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthXboxLoginResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling authUserXboxLogin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/auth/login/xbox`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AuthXboxLoginRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthXboxLoginResponseFromJSON(jsonValue));
    }

    /**
     * Logs in the user based on the xbox token specified and returns a session
     * Xbox Login
     */
    async authUserXboxLogin(requestParameters: AuthUserXboxLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthXboxLoginResponse> {
        const response = await this.authUserXboxLoginRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
