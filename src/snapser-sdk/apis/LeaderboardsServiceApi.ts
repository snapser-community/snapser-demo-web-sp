/* tslint:disable */
/* eslint-disable */
/**
 * lap-legend-race-game
 * Your custom SDK
 *
 * The version of the OpenAPI document: lap-legend-race-game: v1 SDK
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  IncrementScoreRequest,
  LeaderboardsBatchGetScoresResponse,
  LeaderboardsBatchIncrementScoreRequest,
  LeaderboardsBatchIncrementScoreResponse,
  LeaderboardsBatchSetScoreRequest,
  LeaderboardsBatchSetScoreResponse,
  LeaderboardsGetScoresResponse,
  LeaderboardsIncrementScoreResponse,
  LeaderboardsSetScoreResponse,
  SetScoreRequest,
} from '../models/index';
import {
    IncrementScoreRequestFromJSON,
    IncrementScoreRequestToJSON,
    LeaderboardsBatchGetScoresResponseFromJSON,
    LeaderboardsBatchGetScoresResponseToJSON,
    LeaderboardsBatchIncrementScoreRequestFromJSON,
    LeaderboardsBatchIncrementScoreRequestToJSON,
    LeaderboardsBatchIncrementScoreResponseFromJSON,
    LeaderboardsBatchIncrementScoreResponseToJSON,
    LeaderboardsBatchSetScoreRequestFromJSON,
    LeaderboardsBatchSetScoreRequestToJSON,
    LeaderboardsBatchSetScoreResponseFromJSON,
    LeaderboardsBatchSetScoreResponseToJSON,
    LeaderboardsGetScoresResponseFromJSON,
    LeaderboardsGetScoresResponseToJSON,
    LeaderboardsIncrementScoreResponseFromJSON,
    LeaderboardsIncrementScoreResponseToJSON,
    LeaderboardsSetScoreResponseFromJSON,
    LeaderboardsSetScoreResponseToJSON,
    SetScoreRequestFromJSON,
    SetScoreRequestToJSON,
} from '../models/index';

export interface BatchGetScoresRequest {
    userIds: Array<string>;
    leaderboardName: string;
    token: string;
}

export interface BatchIncrementScoreRequest {
    token: string;
    body: LeaderboardsBatchIncrementScoreRequest;
}

export interface BatchSetScoreRequest {
    token: string;
    body: LeaderboardsBatchSetScoreRequest;
}

export interface GetScoresRequest {
    leaderboardName: string;
    range: string;
    count: number;
    token: string;
    userId?: string;
    offset?: number;
    withMetadata?: boolean;
}

export interface IncrementScoreOperationRequest {
    leaderboardName: string;
    userId: string;
    token: string;
    body: IncrementScoreRequest;
}

export interface SetScoreOperationRequest {
    leaderboardName: string;
    userId: string;
    token: string;
    body: SetScoreRequest;
}

/**
 * 
 */
export class LeaderboardsServiceApi extends runtime.BaseAPI {

    /**
     * Gets the standings within a leaderboard for multiple users
     * Score
     */
    async batchGetScoresRaw(requestParameters: BatchGetScoresRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LeaderboardsBatchGetScoresResponse>> {
        if (requestParameters.userIds === null || requestParameters.userIds === undefined) {
            throw new runtime.RequiredError('userIds','Required parameter requestParameters.userIds was null or undefined when calling batchGetScores.');
        }

        if (requestParameters.leaderboardName === null || requestParameters.leaderboardName === undefined) {
            throw new runtime.RequiredError('leaderboardName','Required parameter requestParameters.leaderboardName was null or undefined when calling batchGetScores.');
        }

        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling batchGetScores.');
        }

        const queryParameters: any = {};

        if (requestParameters.userIds) {
            queryParameters['user_ids'] = requestParameters.userIds;
        }

        if (requestParameters.leaderboardName !== undefined) {
            queryParameters['leaderboard_name'] = requestParameters.leaderboardName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        const response = await this.request({
            path: `/v1/leaderboards/batch/leaderboards`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LeaderboardsBatchGetScoresResponseFromJSON(jsonValue));
    }

    /**
     * Gets the standings within a leaderboard for multiple users
     * Score
     */
    async batchGetScores(requestParameters: BatchGetScoresRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LeaderboardsBatchGetScoresResponse> {
        const response = await this.batchGetScoresRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Increments the leaderboard scores for multiple users
     * Score
     */
    async batchIncrementScoreRaw(requestParameters: BatchIncrementScoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LeaderboardsBatchIncrementScoreResponse>> {
        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling batchIncrementScore.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling batchIncrementScore.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        const response = await this.request({
            path: `/v1/leaderboards/batch/leaderboards`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: LeaderboardsBatchIncrementScoreRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LeaderboardsBatchIncrementScoreResponseFromJSON(jsonValue));
    }

    /**
     * Increments the leaderboard scores for multiple users
     * Score
     */
    async batchIncrementScore(requestParameters: BatchIncrementScoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LeaderboardsBatchIncrementScoreResponse> {
        const response = await this.batchIncrementScoreRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the score on the leaderboard for the logged in user (only non \'counter\' leaderboards)
     * Score
     */
    async batchSetScoreRaw(requestParameters: BatchSetScoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LeaderboardsBatchSetScoreResponse>> {
        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling batchSetScore.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling batchSetScore.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        const response = await this.request({
            path: `/v1/leaderboards/batch/leaderboards`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: LeaderboardsBatchSetScoreRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LeaderboardsBatchSetScoreResponseFromJSON(jsonValue));
    }

    /**
     * Updates the score on the leaderboard for the logged in user (only non \'counter\' leaderboards)
     * Score
     */
    async batchSetScore(requestParameters: BatchSetScoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LeaderboardsBatchSetScoreResponse> {
        const response = await this.batchSetScoreRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets the standings within a leaderboard
     * Standings
     */
    async getScoresRaw(requestParameters: GetScoresRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LeaderboardsGetScoresResponse>> {
        if (requestParameters.leaderboardName === null || requestParameters.leaderboardName === undefined) {
            throw new runtime.RequiredError('leaderboardName','Required parameter requestParameters.leaderboardName was null or undefined when calling getScores.');
        }

        if (requestParameters.range === null || requestParameters.range === undefined) {
            throw new runtime.RequiredError('range','Required parameter requestParameters.range was null or undefined when calling getScores.');
        }

        if (requestParameters.count === null || requestParameters.count === undefined) {
            throw new runtime.RequiredError('count','Required parameter requestParameters.count was null or undefined when calling getScores.');
        }

        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling getScores.');
        }

        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        if (requestParameters.range !== undefined) {
            queryParameters['range'] = requestParameters.range;
        }

        if (requestParameters.count !== undefined) {
            queryParameters['count'] = requestParameters.count;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.withMetadata !== undefined) {
            queryParameters['with_metadata'] = requestParameters.withMetadata;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        const response = await this.request({
            path: `/v1/leaderboards/leaderboards/{leaderboard_name}`.replace(`{${"leaderboard_name"}}`, encodeURIComponent(String(requestParameters.leaderboardName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LeaderboardsGetScoresResponseFromJSON(jsonValue));
    }

    /**
     * Gets the standings within a leaderboard
     * Standings
     */
    async getScores(requestParameters: GetScoresRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LeaderboardsGetScoresResponse> {
        const response = await this.getScoresRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Increments the leaderboard score for the user
     * Score
     */
    async incrementScoreRaw(requestParameters: IncrementScoreOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LeaderboardsIncrementScoreResponse>> {
        if (requestParameters.leaderboardName === null || requestParameters.leaderboardName === undefined) {
            throw new runtime.RequiredError('leaderboardName','Required parameter requestParameters.leaderboardName was null or undefined when calling incrementScore.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling incrementScore.');
        }

        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling incrementScore.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling incrementScore.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        const response = await this.request({
            path: `/v1/leaderboards/leaderboards/{leaderboard_name}/users/{user_id}/score`.replace(`{${"leaderboard_name"}}`, encodeURIComponent(String(requestParameters.leaderboardName))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: IncrementScoreRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LeaderboardsIncrementScoreResponseFromJSON(jsonValue));
    }

    /**
     * Increments the leaderboard score for the user
     * Score
     */
    async incrementScore(requestParameters: IncrementScoreOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LeaderboardsIncrementScoreResponse> {
        const response = await this.incrementScoreRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the leaderboard score for the user (only non \'counter\' leaderboards)
     * Score
     */
    async setScoreRaw(requestParameters: SetScoreOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LeaderboardsSetScoreResponse>> {
        if (requestParameters.leaderboardName === null || requestParameters.leaderboardName === undefined) {
            throw new runtime.RequiredError('leaderboardName','Required parameter requestParameters.leaderboardName was null or undefined when calling setScore.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling setScore.');
        }

        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling setScore.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling setScore.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        const response = await this.request({
            path: `/v1/leaderboards/leaderboards/{leaderboard_name}/users/{user_id}/score`.replace(`{${"leaderboard_name"}}`, encodeURIComponent(String(requestParameters.leaderboardName))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SetScoreRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LeaderboardsSetScoreResponseFromJSON(jsonValue));
    }

    /**
     * Updates the leaderboard score for the user (only non \'counter\' leaderboards)
     * Score
     */
    async setScore(requestParameters: SetScoreOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LeaderboardsSetScoreResponse> {
        const response = await this.setScoreRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
