/* tslint:disable */
/* eslint-disable */
/**
 * lap-legend-race-game
 * Your custom SDK
 *
 * The version of the OpenAPI document: lap-legend-race-game: v1 SDK
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RemoteConfigGetAppConfigResponse,
  RemoteConfigGetUserConfigResponse,
} from '../models/index';
import {
    RemoteConfigGetAppConfigResponseFromJSON,
    RemoteConfigGetAppConfigResponseToJSON,
    RemoteConfigGetUserConfigResponseFromJSON,
    RemoteConfigGetUserConfigResponseToJSON,
} from '../models/index';

export interface GetAppConfigRequest {
    version: string;
}

export interface GetUserConfigRequest {
    userId: string;
    token: string;
}

/**
 * 
 */
export class RemoteConfigServiceApi extends runtime.BaseAPI {

    /**
     * Returns the config for the app
     * Get App Config
     */
    async getAppConfigRaw(requestParameters: GetAppConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RemoteConfigGetAppConfigResponse>> {
        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling getAppConfig.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/remote-config/app-config/{version}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RemoteConfigGetAppConfigResponseFromJSON(jsonValue));
    }

    /**
     * Returns the config for the app
     * Get App Config
     */
    async getAppConfig(requestParameters: GetAppConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RemoteConfigGetAppConfigResponse> {
        const response = await this.getAppConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the config for the user
     * Get User Config
     */
    async getUserConfigRaw(requestParameters: GetUserConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RemoteConfigGetUserConfigResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getUserConfig.');
        }

        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling getUserConfig.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        const response = await this.request({
            path: `/v1/remote-config/user-config/{user_id}`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RemoteConfigGetUserConfigResponseFromJSON(jsonValue));
    }

    /**
     * Returns the config for the user
     * Get User Config
     */
    async getUserConfig(requestParameters: GetUserConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RemoteConfigGetUserConfigResponse> {
        const response = await this.getUserConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
