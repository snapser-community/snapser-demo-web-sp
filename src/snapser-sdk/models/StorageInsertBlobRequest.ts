/* tslint:disable */
/* eslint-disable */
/**
 * lap-legend-race-game
 * Your custom SDK
 *
 * The version of the OpenAPI document: lap-legend-race-game: v1 SDK
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface StorageInsertBlobRequest
 */
export interface StorageInsertBlobRequest {
    /**
     * Access to the blob. (public/protected/private)
     * @type {string}
     * @memberof StorageInsertBlobRequest
     */
    accessType: StorageInsertBlobRequestAccessTypeEnum;
    /**
     * Blob key
     * @type {string}
     * @memberof StorageInsertBlobRequest
     */
    blobKey: string;
    /**
     * Blob owner's user ID
     * @type {string}
     * @memberof StorageInsertBlobRequest
     */
    ownerId: string;
    /**
     * Optional TTL for the blob
     * @type {number}
     * @memberof StorageInsertBlobRequest
     */
    ttl?: number;
    /**
     * Blob value to be inserted
     * @type {string}
     * @memberof StorageInsertBlobRequest
     */
    value: string;
}


/**
 * @export
 */
export const StorageInsertBlobRequestAccessTypeEnum = {
    Public: 'public',
    Private: 'private',
    Protected: 'protected'
} as const;
export type StorageInsertBlobRequestAccessTypeEnum = typeof StorageInsertBlobRequestAccessTypeEnum[keyof typeof StorageInsertBlobRequestAccessTypeEnum];


/**
 * Check if a given object implements the StorageInsertBlobRequest interface.
 */
export function instanceOfStorageInsertBlobRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "accessType" in value;
    isInstance = isInstance && "blobKey" in value;
    isInstance = isInstance && "ownerId" in value;
    isInstance = isInstance && "value" in value;

    return isInstance;
}

export function StorageInsertBlobRequestFromJSON(json: any): StorageInsertBlobRequest {
    return StorageInsertBlobRequestFromJSONTyped(json, false);
}

export function StorageInsertBlobRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): StorageInsertBlobRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'accessType': json['access_type'],
        'blobKey': json['blob_key'],
        'ownerId': json['owner_id'],
        'ttl': !exists(json, 'ttl') ? undefined : json['ttl'],
        'value': json['value'],
    };
}

export function StorageInsertBlobRequestToJSON(value?: StorageInsertBlobRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'access_type': value.accessType,
        'blob_key': value.blobKey,
        'owner_id': value.ownerId,
        'ttl': value.ttl,
        'value': value.value,
    };
}

