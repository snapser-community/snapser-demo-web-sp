/* tslint:disable */
/* eslint-disable */
/**
 * my-dev-cluster
 * Your custom SDK
 *
 * The version of the OpenAPI document: my-dev-cluster: v6 SDK
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface StorageReplaceBlobRequest
 */
export interface StorageReplaceBlobRequest {
    /**
     * Access to the blob. (public/protected/private)
     * @type {string}
     * @memberof StorageReplaceBlobRequest
     */
    accessType: StorageReplaceBlobRequestAccessTypeEnum;
    /**
     * Blob key
     * @type {string}
     * @memberof StorageReplaceBlobRequest
     */
    blobKey: string;
    /**
     * CAS value retrieved from the last operation
     * @type {string}
     * @memberof StorageReplaceBlobRequest
     */
    cas?: string;
    /**
     * Whether the blob should be created if it doesn't exist
     * @type {boolean}
     * @memberof StorageReplaceBlobRequest
     */
    create?: boolean;
    /**
     * Blob owner's user ID
     * @type {string}
     * @memberof StorageReplaceBlobRequest
     */
    ownerId: string;
    /**
     * Optional TTL for the blob
     * @type {number}
     * @memberof StorageReplaceBlobRequest
     */
    ttl?: number;
    /**
     * Blob value to be inserted
     * @type {string}
     * @memberof StorageReplaceBlobRequest
     */
    value: string;
}


/**
 * @export
 */
export const StorageReplaceBlobRequestAccessTypeEnum = {
    Public: 'public',
    Private: 'private',
    Protected: 'protected'
} as const;
export type StorageReplaceBlobRequestAccessTypeEnum = typeof StorageReplaceBlobRequestAccessTypeEnum[keyof typeof StorageReplaceBlobRequestAccessTypeEnum];


/**
 * Check if a given object implements the StorageReplaceBlobRequest interface.
 */
export function instanceOfStorageReplaceBlobRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "accessType" in value;
    isInstance = isInstance && "blobKey" in value;
    isInstance = isInstance && "ownerId" in value;
    isInstance = isInstance && "value" in value;

    return isInstance;
}

export function StorageReplaceBlobRequestFromJSON(json: any): StorageReplaceBlobRequest {
    return StorageReplaceBlobRequestFromJSONTyped(json, false);
}

export function StorageReplaceBlobRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): StorageReplaceBlobRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'accessType': json['access_type'],
        'blobKey': json['blob_key'],
        'cas': !exists(json, 'cas') ? undefined : json['cas'],
        'create': !exists(json, 'create') ? undefined : json['create'],
        'ownerId': json['owner_id'],
        'ttl': !exists(json, 'ttl') ? undefined : json['ttl'],
        'value': json['value'],
    };
}

export function StorageReplaceBlobRequestToJSON(value?: StorageReplaceBlobRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'access_type': value.accessType,
        'blob_key': value.blobKey,
        'cas': value.cas,
        'create': value.create,
        'owner_id': value.ownerId,
        'ttl': value.ttl,
        'value': value.value,
    };
}

