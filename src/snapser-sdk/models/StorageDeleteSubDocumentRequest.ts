/* tslint:disable */
/* eslint-disable */
/**
 * lap-legend-race-game
 * Your custom SDK
 *
 * The version of the OpenAPI document: lap-legend-race-game: v1 SDK
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface StorageDeleteSubDocumentRequest
 */
export interface StorageDeleteSubDocumentRequest {
    /**
     * Access to the counter. (public/protected/private)
     * @type {string}
     * @memberof StorageDeleteSubDocumentRequest
     */
    accessType: StorageDeleteSubDocumentRequestAccessTypeEnum;
    /**
     * Optional CAS value retrieved from the last operation. CAS mismatch will be ignored if not passed
     * @type {string}
     * @memberof StorageDeleteSubDocumentRequest
     */
    cas?: string;
    /**
     * Blob key
     * @type {string}
     * @memberof StorageDeleteSubDocumentRequest
     */
    jsonBlobKey: string;
    /**
     * Counter owner's user ID
     * @type {string}
     * @memberof StorageDeleteSubDocumentRequest
     */
    ownerId: string;
    /**
     * Path to the sub-document
     * @type {string}
     * @memberof StorageDeleteSubDocumentRequest
     */
    path: string;
}


/**
 * @export
 */
export const StorageDeleteSubDocumentRequestAccessTypeEnum = {
    Public: 'public',
    Private: 'private',
    Protected: 'protected'
} as const;
export type StorageDeleteSubDocumentRequestAccessTypeEnum = typeof StorageDeleteSubDocumentRequestAccessTypeEnum[keyof typeof StorageDeleteSubDocumentRequestAccessTypeEnum];


/**
 * Check if a given object implements the StorageDeleteSubDocumentRequest interface.
 */
export function instanceOfStorageDeleteSubDocumentRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "accessType" in value;
    isInstance = isInstance && "jsonBlobKey" in value;
    isInstance = isInstance && "ownerId" in value;
    isInstance = isInstance && "path" in value;

    return isInstance;
}

export function StorageDeleteSubDocumentRequestFromJSON(json: any): StorageDeleteSubDocumentRequest {
    return StorageDeleteSubDocumentRequestFromJSONTyped(json, false);
}

export function StorageDeleteSubDocumentRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): StorageDeleteSubDocumentRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'accessType': json['access_type'],
        'cas': !exists(json, 'cas') ? undefined : json['cas'],
        'jsonBlobKey': json['json_blob_key'],
        'ownerId': json['owner_id'],
        'path': json['path'],
    };
}

export function StorageDeleteSubDocumentRequestToJSON(value?: StorageDeleteSubDocumentRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'access_type': value.accessType,
        'cas': value.cas,
        'json_blob_key': value.jsonBlobKey,
        'owner_id': value.ownerId,
        'path': value.path,
    };
}

