/* tslint:disable */
/* eslint-disable */
/**
 * my-dev-cluster
 * Your custom SDK
 *
 * The version of the OpenAPI document: my-dev-cluster: v6 SDK
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface LeaderboardsGetScoresRequest
 */
export interface LeaderboardsGetScoresRequest {
    /**
     * Number of rankings to be displayed
     * @type {number}
     * @memberof LeaderboardsGetScoresRequest
     */
    count: number;
    /**
     * Name of the leaderboard
     * @type {string}
     * @memberof LeaderboardsGetScoresRequest
     */
    leaderboardName: string;
    /**
     * For recurring leaderboards, the offset from the latest occurrence of the leaderboard
     * @type {number}
     * @memberof LeaderboardsGetScoresRequest
     */
    offset?: number;
    /**
     * Range of the leaderboard requested: 'top', 'bottom' or 'around' the user specified
     * @type {string}
     * @memberof LeaderboardsGetScoresRequest
     */
    range: LeaderboardsGetScoresRequestRangeEnum;
    /**
     * Optional user ID for the user who's standing is requested
     * @type {string}
     * @memberof LeaderboardsGetScoresRequest
     */
    userId?: string;
    /**
     * Whether the user metadata should be included with the request
     * @type {boolean}
     * @memberof LeaderboardsGetScoresRequest
     */
    withMetadata?: boolean;
}


/**
 * @export
 */
export const LeaderboardsGetScoresRequestRangeEnum = {
    Top: 'top',
    Bottom: 'bottom',
    Around: 'around'
} as const;
export type LeaderboardsGetScoresRequestRangeEnum = typeof LeaderboardsGetScoresRequestRangeEnum[keyof typeof LeaderboardsGetScoresRequestRangeEnum];


/**
 * Check if a given object implements the LeaderboardsGetScoresRequest interface.
 */
export function instanceOfLeaderboardsGetScoresRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "count" in value;
    isInstance = isInstance && "leaderboardName" in value;
    isInstance = isInstance && "range" in value;

    return isInstance;
}

export function LeaderboardsGetScoresRequestFromJSON(json: any): LeaderboardsGetScoresRequest {
    return LeaderboardsGetScoresRequestFromJSONTyped(json, false);
}

export function LeaderboardsGetScoresRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): LeaderboardsGetScoresRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'count': json['count'],
        'leaderboardName': json['leaderboard_name'],
        'offset': !exists(json, 'offset') ? undefined : json['offset'],
        'range': json['range'],
        'userId': !exists(json, 'user_id') ? undefined : json['user_id'],
        'withMetadata': !exists(json, 'with_metadata') ? undefined : json['with_metadata'],
    };
}

export function LeaderboardsGetScoresRequestToJSON(value?: LeaderboardsGetScoresRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'count': value.count,
        'leaderboard_name': value.leaderboardName,
        'offset': value.offset,
        'range': value.range,
        'user_id': value.userId,
        'with_metadata': value.withMetadata,
    };
}

