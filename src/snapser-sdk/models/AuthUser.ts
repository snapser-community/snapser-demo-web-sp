/* tslint:disable */
/* eslint-disable */
/**
 * my-dev-cluster
 * Your custom SDK
 *
 * The version of the OpenAPI document: my-dev-cluster: v6 SDK
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AuthLoginId } from './AuthLoginId';
import {
    AuthLoginIdFromJSON,
    AuthLoginIdFromJSONTyped,
    AuthLoginIdToJSON,
} from './AuthLoginId';
import type { AuthLoginTypeType } from './AuthLoginTypeType';
import {
    AuthLoginTypeTypeFromJSON,
    AuthLoginTypeTypeFromJSONTyped,
    AuthLoginTypeTypeToJSON,
} from './AuthLoginTypeType';

/**
 * 
 * @export
 * @interface AuthUser
 */
export interface AuthUser {
    /**
     * Whether user was created or not
     * @type {boolean}
     * @memberof AuthUser
     */
    created?: boolean;
    /**
     * Unix timestamp of when the user was created
     * @type {number}
     * @memberof AuthUser
     */
    createdAt?: number;
    /**
     * Unix timestamp of when the user was first logged in
     * @type {number}
     * @memberof AuthUser
     */
    firstLogin?: number;
    /**
     * User ID for the user
     * @type {string}
     * @memberof AuthUser
     */
    id?: string;
    /**
     * Whether user is banned or not
     * @type {boolean}
     * @memberof AuthUser
     */
    isBanned?: boolean;
    /**
     * Whether user is suspended or not
     * @type {boolean}
     * @memberof AuthUser
     */
    isSuspended?: boolean;
    /**
     * Whether user is verified or not
     * @type {boolean}
     * @memberof AuthUser
     */
    isVerified?: boolean;
    /**
     * Login types
     * @type {Array<AuthLoginTypeType>}
     * @memberof AuthUser
     */
    loginTypes?: Array<AuthLoginTypeType>;
    /**
     * List of login IDs associated with the user
     * @type {Array<AuthLoginId>}
     * @memberof AuthUser
     */
    logins?: Array<AuthLoginId>;
    /**
     * Unix timestamp of when the session was last refreshed (If applicable)
     * @type {number}
     * @memberof AuthUser
     */
    refreshedAt?: number;
    /**
     * Session token of the user (If applicable)
     * @type {string}
     * @memberof AuthUser
     */
    sessionToken?: string;
    /**
     * Unix timestamp of when the user is suspended until
     * @type {number}
     * @memberof AuthUser
     */
    suspendedUntil?: number;
    /**
     * Different tags attached to the user like flagged
     * @type {Array<string>}
     * @memberof AuthUser
     */
    tags?: Array<string>;
    /**
     * Validity of the token in seconds (If applicable)
     * @type {number}
     * @memberof AuthUser
     */
    tokenValiditySeconds?: number;
}

/**
 * Check if a given object implements the AuthUser interface.
 */
export function instanceOfAuthUser(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AuthUserFromJSON(json: any): AuthUser {
    return AuthUserFromJSONTyped(json, false);
}

export function AuthUserFromJSONTyped(json: any, ignoreDiscriminator: boolean): AuthUser {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'created': !exists(json, 'created') ? undefined : json['created'],
        'createdAt': !exists(json, 'created_at') ? undefined : json['created_at'],
        'firstLogin': !exists(json, 'first_login') ? undefined : json['first_login'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'isBanned': !exists(json, 'is_banned') ? undefined : json['is_banned'],
        'isSuspended': !exists(json, 'is_suspended') ? undefined : json['is_suspended'],
        'isVerified': !exists(json, 'is_verified') ? undefined : json['is_verified'],
        'loginTypes': !exists(json, 'login_types') ? undefined : ((json['login_types'] as Array<any>).map(AuthLoginTypeTypeFromJSON)),
        'logins': !exists(json, 'logins') ? undefined : ((json['logins'] as Array<any>).map(AuthLoginIdFromJSON)),
        'refreshedAt': !exists(json, 'refreshed_at') ? undefined : json['refreshed_at'],
        'sessionToken': !exists(json, 'session_token') ? undefined : json['session_token'],
        'suspendedUntil': !exists(json, 'suspended_until') ? undefined : json['suspended_until'],
        'tags': !exists(json, 'tags') ? undefined : json['tags'],
        'tokenValiditySeconds': !exists(json, 'token_validity_seconds') ? undefined : json['token_validity_seconds'],
    };
}

export function AuthUserToJSON(value?: AuthUser | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'created': value.created,
        'created_at': value.createdAt,
        'first_login': value.firstLogin,
        'id': value.id,
        'is_banned': value.isBanned,
        'is_suspended': value.isSuspended,
        'is_verified': value.isVerified,
        'login_types': value.loginTypes === undefined ? undefined : ((value.loginTypes as Array<any>).map(AuthLoginTypeTypeToJSON)),
        'logins': value.logins === undefined ? undefined : ((value.logins as Array<any>).map(AuthLoginIdToJSON)),
        'refreshed_at': value.refreshedAt,
        'session_token': value.sessionToken,
        'suspended_until': value.suspendedUntil,
        'tags': value.tags,
        'token_validity_seconds': value.tokenValiditySeconds,
    };
}

