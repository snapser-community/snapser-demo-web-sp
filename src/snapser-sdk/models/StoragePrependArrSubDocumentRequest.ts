/* tslint:disable */
/* eslint-disable */
/**
 * lap-legend-race-game
 * Your custom SDK
 *
 * The version of the OpenAPI document: lap-legend-race-game: v1 SDK
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { StorageJsonFragment } from './StorageJsonFragment';
import {
    StorageJsonFragmentFromJSON,
    StorageJsonFragmentFromJSONTyped,
    StorageJsonFragmentToJSON,
} from './StorageJsonFragment';

/**
 * 
 * @export
 * @interface StoragePrependArrSubDocumentRequest
 */
export interface StoragePrependArrSubDocumentRequest {
    /**
     * Access to the counter. (public/protected/private)
     * @type {string}
     * @memberof StoragePrependArrSubDocumentRequest
     */
    accessType: StoragePrependArrSubDocumentRequestAccessTypeEnum;
    /**
     * Blob key
     * @type {string}
     * @memberof StoragePrependArrSubDocumentRequest
     */
    jsonBlobKey: string;
    /**
     * Counter owner's user ID
     * @type {string}
     * @memberof StoragePrependArrSubDocumentRequest
     */
    ownerId: string;
    /**
     * Fragments to be prepended
     * @type {Array<StorageJsonFragment>}
     * @memberof StoragePrependArrSubDocumentRequest
     */
    updates: Array<StorageJsonFragment>;
}


/**
 * @export
 */
export const StoragePrependArrSubDocumentRequestAccessTypeEnum = {
    Public: 'public',
    Private: 'private',
    Protected: 'protected'
} as const;
export type StoragePrependArrSubDocumentRequestAccessTypeEnum = typeof StoragePrependArrSubDocumentRequestAccessTypeEnum[keyof typeof StoragePrependArrSubDocumentRequestAccessTypeEnum];


/**
 * Check if a given object implements the StoragePrependArrSubDocumentRequest interface.
 */
export function instanceOfStoragePrependArrSubDocumentRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "accessType" in value;
    isInstance = isInstance && "jsonBlobKey" in value;
    isInstance = isInstance && "ownerId" in value;
    isInstance = isInstance && "updates" in value;

    return isInstance;
}

export function StoragePrependArrSubDocumentRequestFromJSON(json: any): StoragePrependArrSubDocumentRequest {
    return StoragePrependArrSubDocumentRequestFromJSONTyped(json, false);
}

export function StoragePrependArrSubDocumentRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): StoragePrependArrSubDocumentRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'accessType': json['access_type'],
        'jsonBlobKey': json['json_blob_key'],
        'ownerId': json['owner_id'],
        'updates': ((json['updates'] as Array<any>).map(StorageJsonFragmentFromJSON)),
    };
}

export function StoragePrependArrSubDocumentRequestToJSON(value?: StoragePrependArrSubDocumentRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'access_type': value.accessType,
        'json_blob_key': value.jsonBlobKey,
        'owner_id': value.ownerId,
        'updates': ((value.updates as Array<any>).map(StorageJsonFragmentToJSON)),
    };
}

