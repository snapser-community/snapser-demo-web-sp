/* tslint:disable */
/* eslint-disable */
/**
 * my-dev-cluster
 * Your custom SDK
 *
 * The version of the OpenAPI document: my-dev-cluster: v6 SDK
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ReplaceJsonBlobRequest
 */
export interface ReplaceJsonBlobRequest {
    /**
     * CAS value retrieved from the last operation
     * @type {string}
     * @memberof ReplaceJsonBlobRequest
     */
    cas?: string;
    /**
     * Whether the json blob should be created if it doesn't exist
     * @type {boolean}
     * @memberof ReplaceJsonBlobRequest
     */
    create?: boolean;
    /**
     * Optional TTL for the json blob
     * @type {number}
     * @memberof ReplaceJsonBlobRequest
     */
    ttl?: number;
    /**
     * JSON value to be inserted
     * @type {object}
     * @memberof ReplaceJsonBlobRequest
     */
    value: object;
}

/**
 * Check if a given object implements the ReplaceJsonBlobRequest interface.
 */
export function instanceOfReplaceJsonBlobRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "value" in value;

    return isInstance;
}

export function ReplaceJsonBlobRequestFromJSON(json: any): ReplaceJsonBlobRequest {
    return ReplaceJsonBlobRequestFromJSONTyped(json, false);
}

export function ReplaceJsonBlobRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReplaceJsonBlobRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'cas': !exists(json, 'cas') ? undefined : json['cas'],
        'create': !exists(json, 'create') ? undefined : json['create'],
        'ttl': !exists(json, 'ttl') ? undefined : json['ttl'],
        'value': json['value'],
    };
}

export function ReplaceJsonBlobRequestToJSON(value?: ReplaceJsonBlobRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'cas': value.cas,
        'create': value.create,
        'ttl': value.ttl,
        'value': value.value,
    };
}

