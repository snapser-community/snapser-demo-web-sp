/* tslint:disable */
/* eslint-disable */
/**
 * lap-legend-race-game
 * Your custom SDK
 *
 * The version of the OpenAPI document: lap-legend-race-game: v1 SDK
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { StorageBatchReplaceJsonBlobSingleResponse } from './StorageBatchReplaceJsonBlobSingleResponse';
import {
    StorageBatchReplaceJsonBlobSingleResponseFromJSON,
    StorageBatchReplaceJsonBlobSingleResponseFromJSONTyped,
    StorageBatchReplaceJsonBlobSingleResponseToJSON,
} from './StorageBatchReplaceJsonBlobSingleResponse';

/**
 * 
 * @export
 * @interface StorageBatchReplaceJsonBlobsResponse
 */
export interface StorageBatchReplaceJsonBlobsResponse {
    /**
     * 
     * @type {Array<StorageBatchReplaceJsonBlobSingleResponse>}
     * @memberof StorageBatchReplaceJsonBlobsResponse
     */
    results?: Array<StorageBatchReplaceJsonBlobSingleResponse>;
}

/**
 * Check if a given object implements the StorageBatchReplaceJsonBlobsResponse interface.
 */
export function instanceOfStorageBatchReplaceJsonBlobsResponse(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function StorageBatchReplaceJsonBlobsResponseFromJSON(json: any): StorageBatchReplaceJsonBlobsResponse {
    return StorageBatchReplaceJsonBlobsResponseFromJSONTyped(json, false);
}

export function StorageBatchReplaceJsonBlobsResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): StorageBatchReplaceJsonBlobsResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'results': !exists(json, 'results') ? undefined : ((json['results'] as Array<any>).map(StorageBatchReplaceJsonBlobSingleResponseFromJSON)),
    };
}

export function StorageBatchReplaceJsonBlobsResponseToJSON(value?: StorageBatchReplaceJsonBlobsResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'results': value.results === undefined ? undefined : ((value.results as Array<any>).map(StorageBatchReplaceJsonBlobSingleResponseToJSON)),
    };
}

