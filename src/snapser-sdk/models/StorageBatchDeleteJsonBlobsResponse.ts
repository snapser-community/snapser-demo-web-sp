/* tslint:disable */
/* eslint-disable */
/**
 * lap-legend-race-game
 * Your custom SDK
 *
 * The version of the OpenAPI document: lap-legend-race-game: v1 SDK
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { StorageBatchDeleteJsonBlobsSingleResponse } from './StorageBatchDeleteJsonBlobsSingleResponse';
import {
    StorageBatchDeleteJsonBlobsSingleResponseFromJSON,
    StorageBatchDeleteJsonBlobsSingleResponseFromJSONTyped,
    StorageBatchDeleteJsonBlobsSingleResponseToJSON,
} from './StorageBatchDeleteJsonBlobsSingleResponse';

/**
 * 
 * @export
 * @interface StorageBatchDeleteJsonBlobsResponse
 */
export interface StorageBatchDeleteJsonBlobsResponse {
    /**
     * 
     * @type {Array<StorageBatchDeleteJsonBlobsSingleResponse>}
     * @memberof StorageBatchDeleteJsonBlobsResponse
     */
    results?: Array<StorageBatchDeleteJsonBlobsSingleResponse>;
}

/**
 * Check if a given object implements the StorageBatchDeleteJsonBlobsResponse interface.
 */
export function instanceOfStorageBatchDeleteJsonBlobsResponse(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function StorageBatchDeleteJsonBlobsResponseFromJSON(json: any): StorageBatchDeleteJsonBlobsResponse {
    return StorageBatchDeleteJsonBlobsResponseFromJSONTyped(json, false);
}

export function StorageBatchDeleteJsonBlobsResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): StorageBatchDeleteJsonBlobsResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'results': !exists(json, 'results') ? undefined : ((json['results'] as Array<any>).map(StorageBatchDeleteJsonBlobsSingleResponseFromJSON)),
    };
}

export function StorageBatchDeleteJsonBlobsResponseToJSON(value?: StorageBatchDeleteJsonBlobsResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'results': value.results === undefined ? undefined : ((value.results as Array<any>).map(StorageBatchDeleteJsonBlobsSingleResponseToJSON)),
    };
}

