/* tslint:disable */
/* eslint-disable */
/**
 * test
 * Your custom SDK
 *
 * The version of the OpenAPI document: test: v1 SDK
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface StorageIncrementCounterRequest
 */
export interface StorageIncrementCounterRequest {
    /**
     * Access to the counter. (public/protected/private)
     * @type {string}
     * @memberof StorageIncrementCounterRequest
     */
    accessType: StorageIncrementCounterRequestAccessTypeEnum;
    /**
     * Value to increment the counter by. Use negative to decrement
     * @type {number}
     * @memberof StorageIncrementCounterRequest
     */
    count: number;
    /**
     * Counter key
     * @type {string}
     * @memberof StorageIncrementCounterRequest
     */
    counterKey: string;
    /**
     * Counter owner's user ID
     * @type {string}
     * @memberof StorageIncrementCounterRequest
     */
    ownerId: string;
}


/**
 * @export
 */
export const StorageIncrementCounterRequestAccessTypeEnum = {
    Public: 'public',
    Private: 'private',
    Protected: 'protected'
} as const;
export type StorageIncrementCounterRequestAccessTypeEnum = typeof StorageIncrementCounterRequestAccessTypeEnum[keyof typeof StorageIncrementCounterRequestAccessTypeEnum];


/**
 * Check if a given object implements the StorageIncrementCounterRequest interface.
 */
export function instanceOfStorageIncrementCounterRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "accessType" in value;
    isInstance = isInstance && "count" in value;
    isInstance = isInstance && "counterKey" in value;
    isInstance = isInstance && "ownerId" in value;

    return isInstance;
}

export function StorageIncrementCounterRequestFromJSON(json: any): StorageIncrementCounterRequest {
    return StorageIncrementCounterRequestFromJSONTyped(json, false);
}

export function StorageIncrementCounterRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): StorageIncrementCounterRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'accessType': json['access_type'],
        'count': json['count'],
        'counterKey': json['counter_key'],
        'ownerId': json['owner_id'],
    };
}

export function StorageIncrementCounterRequestToJSON(value?: StorageIncrementCounterRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'access_type': value.accessType,
        'count': value.count,
        'counter_key': value.counterKey,
        'owner_id': value.ownerId,
    };
}

